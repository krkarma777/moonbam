<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.config.MemberMapper">


	<!-- **************************************************************** -->
	<!-- *********************디버그 Mapper********************************* -->
	<!-- **************************************************************** -->


	<!-- 디버그용 - 회원 정보 찾기 -->	
	<select id="selectAll" resultType="MemberDTO">
		SELECT
			*
		FROM
			memberDB
	</select>
	
	<!-- 디버그용 - 회원 삭제 -->
	<delete id="IDDelete" parameterType="String">
		DELETE 
		FROM memberDB
		Where username = #{username}
	</delete>
	
	
	<!-- **************************************************************** -->
	<!-- *********************게시판 Mapper********************************* -->
	<!-- **************************************************************** -->
	
	
	<!-- 게시판 목록 출력 -->
	<select id="viewDBoardList" resultType="DebugBoardDTO">
		SELECT
			boardNum, nickname, title, category, edittedDate, viewCount, recommendNum, disRecommendNum
		FROM
			debugBoardDB
		<choose>
	        <when test="orderBy == 'boardNum'">				<!-- 기본정렬 -->
	            ORDER BY boardNum desc
	        </when>
	        <when test="orderBy == 'viewCount'">			<!-- 인기글 -->
	        	WHERE viewcount > 100
	            ORDER BY viewCount desc
	        </when>
	        <when test="orderBy == 'recommendNum'">			<!-- 추천글 -->
	        	WHERE recommendNum-disRecommendNum >= 20
	            ORDER BY recommendNum desc
	        </when>
	        <when test="orderBy == '정보'">			<!-- 정보 카테고리 -->
	        	WHERE category = '정보'
	            ORDER BY boardNum desc
	        </when>
	        <when test="orderBy == '문제'">			<!-- 문제 카테고리 -->
	        	WHERE category = '문제'
	            ORDER BY boardNum desc
	        </when>
	        <when test="orderBy == '질문'">			<!-- 질문 카테고리 -->
	        	WHERE category = '질문'
	            ORDER BY boardNum desc
	        </when>
	        <when test="orderBy == '정리'">			<!-- 정리 카테고리 -->
	        	WHERE category = '정리'
	            ORDER BY boardNum desc
	        </when>
	        <when test="orderBy == '잡담'">			<!-- 잡담 카테고리 -->
	        	WHERE category = '잡담'
	            ORDER BY boardNum desc
	        </when>
	        <otherwise>
	            ORDER BY boardNum desc 				<!-- 기본정렬 -->
	        </otherwise>
    	</choose>
	</select>
	
	<!-- 게시판 글 검색 -->
	<select id="searchList" resultType="DebugBoardDTO" parameterType="hashmap">
	    SELECT *
	    FROM debugBoardDB
	    <where>
	        <if test="searchTag == 'title_contents'">		<!-- 제목 + 내용 -->
	            AND (title LIKE '%'||#{searchData}||'%' OR content LIKE '%'||#{searchData}||'%')
	        </if>
	        <if test="searchTag == 'title'">				<!-- 제목 -->
	            AND title LIKE '%'||#{searchData}||'%'
	        </if>
	        <if test="searchTag == 'contents'">				<!-- 내용 -->
	            AND content LIKE '%'||#{searchData}||'%'
	        </if>
	        <if test="searchTag == 'nickname'">				<!-- 닉네임 -->
	            AND nickname = #{searchData}
	        </if>
	    </where>
	    ORDER BY boardNum desc
	</select>
	
	<!-- 게시판 글 출력 -->
	<select id="viewDBoardContent" resultType="DebugBoardDTO" parameterType="int">
		SELECT
			boardNum, nickname, password, title, category, content, edittedDate, viewCount, recommendNum, disRecommendNum
		FROM
			debugBoardDB
		WHERE
			boardNum = #{boardNum}
	</select>
			
	<!-- 게시판글 입력-->
	<insert id="insertPost" parameterType="DebugBoardDTO">
		INSERT INTO debugBoardDB (
			boardNum, nickname, password, title, category, content, 
			postDate, edittedDate)
    	VALUES (
    		DEBUGBOARD_SEQ.nextval, #{nickname}, #{password}, #{title}, #{category}, #{content}, 
    		#{postDate}, #{postDate})
	</insert>
	
	<!-- 게시판글 수정 -->
	<update id="updateDBoard" parameterType="DebugBoardDTO">
	    UPDATE debugBoardDB
	    SET 
		    nickname = #{nickname},
	    	password = #{password},
	        title = #{title},
	        category = #{category},
	        content = #{content},
	        edittedDate = #{edittedDate}
	    WHERE boardNum = #{boardNum}
	</update>
	
	<!-- 게시판글 삭제 -->
	<delete id="deleteDBoard" parameterType="int">
	    DELETE FROM debugBoardDB
	    WHERE BOARDNUM = #{boardNum}
	</delete>
	
	<!-- 게시판글 조회수 수정 -->
	<update id="updateDBoardViewCount" parameterType="Integer">
	    UPDATE debugBoardDB
	    SET viewCount = viewCount + 1
	    WHERE boardNum = #{boardNum}
	</update>
	
	<!-- 게시판글 추천수 증가 -->
	<update id="increaseDBoardRecommendNum" parameterType="Integer">
	    UPDATE debugBoardDB
	    SET 
	        recommendNum = recommendNum+1
	    WHERE boardNum = #{boardNum}
	</update>
	
	<!-- 게시판글 비추천수 증가 -->
	<update id="decreaseDBoardRecommendNum" parameterType="Integer">
	    UPDATE debugBoardDB
	    SET 
	        disRecommendNum = disRecommendNum+1
	    WHERE boardNum = #{boardNum}
	</update>
	
	
	<!-- 현재 글의 이전 글 목록 -->
	<select id="prevPost" parameterType="int" resultType="DebugBoardDTO">
		select 	boardNum, nickname, title, category, edittedDate, viewCount, recommendNum, disRecommendNum
		from 	debugboarddb
		where 	boardNum =(
	    				select max(boardnum)
	    				from debugboarddb
	    				where #{boardnum} > boardNum
	)
	</select>
	
	<!-- 현재 글의 다음 글 목록 -->
	<select id="nextPost" parameterType="int" resultType="DebugBoardDTO">
		select 	boardNum, nickname, title, category, edittedDate, viewCount, recommendNum, disRecommendNum
		from 	debugboarddb
		where 	boardNum =(
	    				select min(boardnum)
	    				from debugboarddb
	    				where boardnum > #{boardnum}
	)
	</select>
	
	
	<!-- **************************************************************** -->
	<!-- *********************API Mapper********************************* -->
	<!-- **************************************************************** -->
	
	<!-- API 회원 출력 -->
	<select id="selectOneAPIMember" resultType="MemberDTO">
		SELECT 	*
		FROM 	memberDB
		WHERE	username = #{username}
	</select>
	
	<!-- API 회원가입 -->
	<insert id="insertAPIMember" parameterType="MemberDTO">
		INSERT INTO memberDB (
			username, password, nickname, 
			googleConnected, naverConnected, kakaoConnected
		)
		VALUES (
			#{username}, #{password}, #{nickname},
			#{googleConnected}, #{naverConnected}, #{kakaoConnected}
		)
	</insert>
	
	<!-- API 회원가입된 유저 닉네임 변경 -->
	<update id="updateAPIMemberNickname" parameterType="hashmap">
		UPDATE 	memberDB
		SET		nickname = #{nickname}
		WHERE	username = #{username}
	</update>
	
	<update id="updateAPIMemberGoogleConnected" parameterType="String">
		UPDATE 	memberDB
		SET		googleConnected = 1
		WHERE	username = #{username}
	</update>
	
	<update id="updateAPIMemberNaverConnected" parameterType="String">
		UPDATE 	memberDB
		SET		naverConnected = 1
		WHERE	username = #{username}
	</update>
	
	<update id="updateAPIMemberKakaoConnected" parameterType="String">
		UPDATE 	memberDB
		SET		kakaoConnected = 1
		WHERE	username = #{username}
	</update>
	

	<!-- **************************************************************** -->
	<!-- *********************로그인 Mapper********************************* -->
	<!-- **************************************************************** -->
	
	<!-- 아이디 찾기 -->
	<select id="findUsername" resultType="MemberDTO" parameterType="hashmap">
		SELECT
			*
		FROM 
			memberDB
		WHERE 
			restoreUserEmailId = #{restoreUserEmailId}
			AND restoreUserEmailDomain = #{restoreUserEmailDomain}
	</select>

	<!-- 로그인 -->
	<select id="login" resultType="MemberDTO" parameterType="hashmap">
		SELECT
			*
		FROM
			memberDB
		WHERE 
			username = #{username}
			AND password = #{password}
	</select>

	<!-- 로그인 에이젝스 -->
	<select id="loginPossible" resultType="int" parameterType="hashmap">
		SELECT COUNT(*)
		FROM memberDB
		WHERE 
			username = #{username}
			AND password = #{password}
	</select>
		
	<!-- 전체 비밀번호 - 닉네임으로 찾기 -->
	<select id="findPWbyNickname" resultType="int" parameterType="hashmap">
		SELECT COUNT(*)
		FROM memberDB
		WHERE 
			username = #{username}
			AND nickname = #{nickname}
	</select>
	
	<!-- 전체 비밀번호 - 이메일로 찾기 -->
	<select id="findPWbyEmail" resultType="int" parameterType="hashmap">
		SELECT COUNT(*)
		FROM memberDB
		WHERE 
			username = #{username}
			AND restoreUserEmailId = #{restoreUserEmailId}
			AND restoreUserEmailDomain = #{restoreUserEmailDomain}
	</select>
	
	<update id="updatePassword" parameterType="hashmap">
		UPDATE 	memberDB
		SET		password = #{password}
		WHERE	username = #{username}
	</update>

	<!-- **************************************************************** -->
	<!-- *********************회원가입 Mapper********************************* -->
	<!-- **************************************************************** -->
	
	<!-- 회원가입 -->
	<insert id="insertNewMember" parameterType="MemberDTO">
		INSERT INTO memberDB (
		username, password, nickname, 
		restoreUserEmailId, restoreUserEmailDomain,
		userSignDate, userType
		)
		VALUES (
		#{username}, #{password}, #{nickname},
		#{restoreUserEmailId}, #{restoreUserEmailDomain},
		#{userSignDate}, #{userType}
		)
	</insert>

	<!-- 아이디 중복 검사 에이젝스 -->
	<select id="isUsernameDuplicate" resultType="int" parameterType="String">
		SELECT COUNT(*)
		FROM memberDB
		WHERE username = #{username}
	</select>

	<!-- 닉네임 중복 검사 에이젝스 -->
	<select id="isUserNicknameDuplicate" resultType="int" parameterType="String">
		SELECT COUNT(*)
		FROM memberDB
		WHERE nickname = #{nickname}
	</select>

	<!-- 이메일 중복 검사 에이젝스 -->
	<select id="isUserEmailDuplicate" resultType="int" parameterType="hashmap">
		SELECT COUNT(*)
		FROM memberDB
		WHERE 
			userEmailId = #{userEmailId}
			AND userEmailDomain = #{userEmailDomain}
	</select>
	
</mapper>